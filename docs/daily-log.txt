Sunday, 2 June 2019
on willem@willem-Latitude-5590

tinkering getting Jasypt to work with Spring Boot:
works with simple test but encrypted password in application.yml cannot be loaded:
Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException:
 Could not resolve placeholder 'enc-fake-password' in value "${enc-fake-password}"
 It is not aBouncyCastle or enhanced security policy problem as we get the same error with the defaults: PBEWithMD5AndDES and
 and SunJCE as well
Although it should be simple enough:
http://mbcoder.com/spring-boot-how-to-encrypt-properties-in-application-properties/


https://github.com/ulisesbocchio/jasypt-spring-boot
https://github.com/ulisesbocchio/jasypt-spring-boot-samples/blob/master/jasypt-spring-boot-demo/src/main/java/demo/DemoApplication.java

https://www.baeldung.com/spring-boot-jasypt
To be continued

========================================================================================================================
Wednesday, 29 May 2019
on willem@willem-Latitude-5590

We configured basic logging in
Hands-On-Spring-Security-5-for-Reactive-Applications/Chapter03/spring-boot-auth2-login/src/main/resources/application.yml
after consulting https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

We added the nl.vea.samples.spring.security.boot.auth2login.filter.TrafficContentLogger and we find it logs all calls
that would reach any of the Application's controllers, but not the traffic intercepted by Spring's security filters.
ToDo: We might be able to force a change in the filter chain order.

The next thing ToDO is to introduce jasypt in the projects nl.vea.samples.spring-security:boot-auth2login:1.0-SNAPSHOT and
nl.vea.samples.spring-security:spring-boot-oauth-oidc-authentication-tweaked:0.0.1-SNAPSHOT
========================================================================================================================
Sunday, 25 May 2019
on willem@willem-Latitude-5590

We got github to work as well
For this we tested https://github.com/spring-projects/spring-security/tree/master/samples/boot/oauth2login#github-login
From the README.adoc it becomes clear that the Authorization callback URL must be set to
http://localhost:8080/login/oauth2/code/github
We end up reconfiguring the Settings > Developer settings > OAuth Apps > spring-security-oauth-test-client-github
Application name            =   spring-security-oauth-test-client-github
Homepage URL                =   http://localhost:8080/
Authorization callback URL  =   http://localhost:8080/login/oauth2/code/github

The only properties that need to be set in application.properties or application.yml are
spring.security.oauth2.client.registration.github.client-id
and
spring.security.oauth2.client.registration.github.client-secret
that we can get from the github account configuration webpage https://github.com/settings/applications/{some id}
we can navigate to after login

This works because spring boot security has default settings placed in
https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/oauth2/client/CommonOAuth2Provider.java

We tweaked the exiting maven project as
Hands-On-Spring-Security-5-for-Reactive-Applications/Chapter03/spring-boot-oauth-oidc-authentication-tweaked/pom.xml and
added a version of https://github.com/spring-projects/spring-security/tree/master/samples/boot/oauth2login#github-login as
Hands-On-Spring-Security-5-for-Reactive-Applications/Chapter03/spring-boot-auth2-login/pom.xml
    ---
With the BitBucket configuration we managed to fix the exception:
DEBUG o.s.s.w.a.ExceptionTranslationFilter - Access is denied (user is anonymous);
redirecting to authentication entry point
org.springframework.security.access.AccessDeniedException: Access is denied
based on
o.s.s.w.a.AnonymousAuthenticationFilter - Populated SecurityContextHolder with anonymous token:
'org.springframework.security.authentication.AnonymousAuthenticationToken@294334ac: Principal: anonymousUser;
Credentials: [PROTECTED]; Authenticated: true;
Details: org.springframework.security.web.authentication.WebAuthenticationDetails@957e:
RemoteIpAddress: 127.0.0.1; SessionId: null; Granted Authorities: ROLE_ANONYMOUS'
By adding com.packtpub.book.ch03.springsecurity.springbootoauthoidcauthentication.config.SpringSecurityConfig#configure
to the Hands-On-Spring-Security-5-for-Reactive-Applications/Chapter03/spring-boot-oauth-oidc-authentication-tweaked/
project
This did not hinder the workings of the github and google authentication with the default Spring Boot configurations

We still got an error on the value of spring.security.oauth2.client.provider.bitbucket.user-name-attribute in
Hands-On-Spring-Security-5-for-Reactive-Applications/Chapter03/spring-boot-oauth-oidc-authentication-tweaked/src/main/
resources/application.properties
However, if this property isn't set we got a complaint on that as well.

More info in how to tweak the Bit Bucket side of things:
https://developer.atlassian.com/cloud/bitbucket/oauth-2/ under
    1. Authorization Code Grant (4.1)
and https://bitbucket.org/atlassian/bb-cloud-auth-code-grant-sample-app/src/master/routes/index.js
and https://api.bitbucket.org/2.0/user/emails as spring.security.oauth2.client.provider.bitbucket.user-info-uri
see also https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails

General info see also:
https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#openid-sample
========================================================================================================================
Saturday, 25 May 2019
on willem@willem-Latitude-5590

Instructions for registering your application to github and bit bucket respectively
https://auth0.com/docs/connections/social/github
Settings > Developer settings > OAuth Apps [new OAuth App]

Client ID
8eb5128d2d36833adc5b
Client Secret


Application name
spring-security-private-test-app-github

Homepage URL
http://localhost:8080/home
The full URL to your application homepage.

Application description
This is a test spring security based application to experiment with OIDC
This is displayed to all users of your application.

Authorization callback URL
http://localhost:8080/callback
Your applicationâ€™s callback URL. Read our OAuth documentation for more information.

https://auth0.com/docs/connections/social/bitbucket
Settings > Access Management / OAuth

For bitbucket a whole load of application properties had to be filled out before the application started without exceptions
but we fixed that somehow by combining:
https://stackoverflow.com/questions/49315552/authorizationgranttype-cannot-be-null-in-spring-security-5-oauth-client-and-spri
https://stackoverflow.com/questions/53935291/springboot-2-x-spring-5-x-oauth-2-0-spring-security-bitbucket-integration
https://developer.atlassian.com/cloud/bitbucket/oauth-2/
https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2login-boot-property-mappings
https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/AuthorizationGrantType.html
https://pattern-match.com/blog/2018/10/17/springboot2-with-oauth2-integration/
https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2login-boot-property-mappings

The example was barely sufficient
The Google example returned to the callback page, but both the GitHub and BitBucket example keep returning to the login page
apparantly there is something wrong so they don't return to the callback page (Is it the use of localhost?)
Two options: we could set up some universal error pages see how to do that with Spring in Action 5th edition
Trying out some other tutorials:
https://www.javacodegeeks.com/2019/03/quick-guide-oauth-spring-security.html
https://pattern-match.com/blog/2018/10/17/springboot2-with-oauth2-integration/
https://pattern-match.com/blog/2019/02/12/springboot2-and-oauth2-authorization-and-revocation/
https://spring.io/blog/2018/03/06/using-spring-security-5-to-integrate-with-oauth-2-secured-services-such-as-facebook-and-github
https://spring.io/guides/tutorials/spring-boot-oauth2/ (starts with facebook second part adds GitHub capabilities)

https://docs.spring.io/spring-security/site/docs/current/reference/html5/

https://github.com/robwinch/github-cla

https://stackoverflow.com/questions/45996726/changing-the-login-service-url-in-spring-security
https://medium.com/@phayao/use-line-login-with-spring-security-fbaf59453c46
https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/html/oauth2login-advanced.html
========================================================================================================================
Monday, 13 May 2019
on willem@willem-Latitude-5590

Today we tested the com.packtpub.book.ch03.springsecurity:spring-boot-ldap-basic-authentication:1.0-SNAPSHOT application
and read that part of chapter 3.
We will tweak theexample to be a little more elaborate
(see also
/media/willem/Blue Seagate Backup Plus Drive/Backups/ne72pg@WPU8L0011276.ad.ing.net/Resources/git/gitlab/FENIKS-FLOW/
feniks-flow-application/src/main/resources/config/application-local.properties and
/media/willem/Blue Seagate Backup Plus Drive/Backups/ne72pg@WPU8L0011276.ad.ing.net/Resources/git/gitlab/FENIKS-FLOW/
feniks-flow-application/src/main/java/nl/ing/lending/feniksflow/config/security/WebSecurityConfig.java
========================================================================================================================
Sunday, 12 May 2019
on willem@willem-Latitude-5590

Trying out the remainder of chapter 2
The jetty-in-memory-basic-authentication works as is, but the spring-boot-in-memory-basic-authentication is not finished
yet and the book states it works when you add the @SpringBootApplication annotated example class
com.packtpub.book.ch02.springsecurity.Run with its special main() implementation to the previous example. This, however,
is not really clear as you would have a lot of unnecessary classes in the com.packtpub.book.ch02.springsecurity.config
package. The whole point is that a lot of default configuration code is encapsulated from you and extra configurations
are usually set as properties inside application.properties.
This properties file is already present and contains:
    spring.mvc.view.prefix: /WEB-INF/views/
    spring.mvc.view.suffix: .jsp
which replaces info previously configured by
com.packtpub.book.ch02.springsecurity.config.WebApplicationConfig.configureViewResolvers.
Moreover,
    com.packtpub.book.ch02.springsecurity.config.SpringMvcWebApplicationInitializer and
    com.packtpub.book.ch02.springsecurity.config.SecurityWebApplicationInitializer
appear to be unnecessary in the SpringBoot application.
Finally, we would only need the extra
    com.packtpub.book.ch02.springsecurity.config.ApplicationConfig
if we needed a special factory method (with the @Bean annotation), that is, if we deviated by the defaults provided
by SpringBoot, which can configure a lot of default components just by adding a view properties to application.properties

Therefore, it turns out that besides the new
    com.packtpub.book.ch02.springsecurity.Run
We only have to copy
    src/main/webapp/WEB-INF/views/home.jsp,
    com.packtpub.book.ch02.springsecurity.controller.HomeController and
    com.packtpub.book.ch02.springsecurity.config.SpringSecurityConfig

Thus, after running mvn clean package and then mvn spring-boot:run we could test the basic authentication from the browser
after choosing http://localhost:8080.

Tweaking com.packtpub.book.ch02.springsecurity.config.SpringSecurityConfig.configure(
org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder) substituting
adminBoot for admin as user and "{noop}adminBoot@password" as password we tested that these changes compelled
the user/tester of the browser to provide these new credentials.
========================================================================================================================
Saturday, 04 May 2019
on willem@willem-Latitude-5590

We tweaked the Chapter02/jetty-db-basic-authentication/ example using postgreSQL as a database
1)  Preparing the database with ddl_postgreSQL/postgres_prepare_for_spring_security_schema.sql connected as postgres
    1.1)    adding new roles:
            spring_security_owner capable to login and to run schema ddl
            spring_security_crud_role to grant privileges per db object within ddl
            spring_security_read_role to grant privileges per db object within ddl
            spring_security_app capable to log in and granted spring_security_crud_role
    1.2)    creating spring_security_schema authorizing spring_security_owner as the owner
    1.3)    granting usage of spring_security_schema to both spring_security_crud_role and spring_security_read_role
2)  Running ddl_postgreSQL/spring_security_schema_definition.sql connected as spring_security_owner
    Creating the tables and granting privileges to spring_security_crud_role and spring_security_read_role respectively
3)  Running ddl_postgreSQL/spring_security_inserts.sql connected as spring_security_app.
4)  postgreSQLdb.properties added.
5)  com.packtpub.book.ch02.springsecurity.config.ApplicationConfig#getDataSource modified to use the postgres configurations
6)  adding the postgres jdbc driver dependency to Chapter02/jetty-db-basic-authentication/pom.xml
7)  We created com.packtpub.book.ch02.springsecurity.PostgresConnectionIT to locally test the connection and query the schema.
    Beware that this test will only work if the environment was carefully prepared with a Postgres DB installed plus
    all the six steps described above. So it is more of an environment test than a source code test.
    Therefore, by using the IT suffix instead of Test this test will be ignored by the maven surefire plugin during
    builds so these builds will succeed regardless of the environment.
    The test was successful so the environment was configured correctly.
8)  After a maven clean package we used jetty:run to start the application
    connecting the browser to http://localhost:8080 prompted for basic authentication and both username/password
    combinations were successful:
        User = admin    and password = admin@password
        User = user     and password = user@password


========================================================================================================================
Saturday, 04 May 2019
on willem@willem-Latitude-5590
Well under way in chapter 2 recreating the Sample application from page 47 onwards until page 60.
Implementing all source code under com.packtpub.book.ch02.springsecurity:jetty-db-basic-authentication:1.0-SNAPSHOT.

To get it running with a database we will tweak the example to run it on PostgreSQL.
========================================================================================================================
Saturday, 27 April 2019
on willem@willem-Latitude-5590
Set up this git repository for code examples accompanying
https://www.packtpub.com/application-development/hands-spring-security-5-reactive-applications by forking
https://github.com/PacktPublishing/Hands-On-Spring-Security-5-for-Reactive-Applications to
https://github.com/wjc-van-es/Hands-On-Spring-Security-5-for-Reactive-Applications

(Not yet with BitBucket)
The projects from chapter 2 and 3 could be built with mvn clean install against jdk1.8.0_202 (from Oracle)